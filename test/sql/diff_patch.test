# name: test/sql/diff_patch.test
# description: scenario tests for diff_patch extension (UTF-8, + - =)
# group: [sql]

require diff_patch

# Setup a UTF-8 demo table
statement ok
CREATE TEMP TABLE demo AS
  SELECT *
  FROM (VALUES
    (1, 'café', 'ca🌟é!'),
    (2, '你好世界', '你🌈好地球'),
    (3, 'abc', 'abcfoo')
  ) AS t(id, old_content, new_content);

# Inspect demo
query ITT
SELECT id, old_content, new_content FROM demo ORDER BY id
----
1	café	ca🌟é!
2	你好世界	你🌈好地球
3	abc	abcfoo

# Derive columns with dynamic prefix 'nc'
query TTTI
SELECT CAST(id AS VARCHAR), (s).nc_ops, (s).nc_plus_concat, list_extract((s).nc_vals, 1)
FROM (SELECT id, make_cols_from_text(old_content, new_content, 'nc') AS s FROM demo) t
ORDER BY id
----
1	=-+=+	🌟!	2
2	=+=-+	🌈地球	1
3	=+	foo	3

# Reconstruct new_content using apply_cols
query TT
SELECT new_content,
       apply_cols(old_content, (s).nc_ops, (s).nc_plus_concat, (s).nc_vals) AS reconstructed
FROM (SELECT old_content, new_content, make_cols_from_text(old_content, new_content, 'nc') AS s FROM demo) t
ORDER BY new_content
----
abcfoo	abcfoo
ca🌟é!	ca🌟é!
你🌈好地球	你🌈好地球

# diff_patch with make_patch over demo rows
query TT
SELECT new_content,
       diff_patch(old_content, make_patch(old_content, new_content)) AS patched
FROM demo
ORDER BY id
----
ca🌟é!	ca🌟é!
你🌈好地球	你🌈好地球
abcfoo	abcfoo

# Length checks: length(new_content) == cols_len(ops, vals) == patch_len(make_patch(...))
query TTT
SELECT CAST(id AS VARCHAR),
       length(new_content),
       cols_len((s).nc_ops, (s).nc_vals)
FROM (SELECT id, new_content, make_cols_from_text(old_content, new_content, 'nc') AS s FROM demo) t
ORDER BY id
----
1	5	5
2	5	5
3	6	6

query TI
SELECT CAST(id AS VARCHAR), patch_len(make_patch(old_content, new_content))
FROM demo
ORDER BY id
----
1	5
2	5
3	6
